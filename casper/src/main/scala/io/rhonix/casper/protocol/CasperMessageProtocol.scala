package io.rhonix.casper.protocol

trait CasperMessageProtocol {
  import FromPacket.protoImpl
  import ToPacket.protoSerde

  implicit final val blockMessageFromPacket =
    protoImpl[PacketTypeTag.BlockMessage.type, BlockMessageProto]
  implicit final val blockHashMessageFromPacket =
    protoImpl[PacketTypeTag.BlockHashMessage.type, BlockHashMessageProto]
  implicit final val blockRequestFromPacket =
    protoImpl[PacketTypeTag.BlockRequest.type, BlockRequestProto]
  implicit final val hasBlockRequestFromPacket =
    protoImpl[PacketTypeTag.HasBlockRequest.type, HasBlockRequestProto]
  implicit final val hasBlockFromPacket = protoImpl[PacketTypeTag.HasBlock.type, HasBlockProto]
  implicit final val forkChoiceTipRequestFromPacket =
    protoImpl[PacketTypeTag.ForkChoiceTipRequest.type, ForkChoiceTipRequestProto]
  // Finalized fringe
  implicit final val finalizedFringeFromPacket =
    protoImpl[PacketTypeTag.FinalizedFringe.type, FinalizedFringeProto]
  implicit final val finalizedFringeRequestFromPacket =
    protoImpl[PacketTypeTag.FinalizedFringeRequest.type, FinalizedFringeRequestProto]
  // Last finalized state messages
  implicit final val storeItemsMessageRequestFromPacket =
    protoImpl[PacketTypeTag.StoreItemsMessageRequest.type, StoreItemsMessageRequestProto]
  implicit final val storeItemsMessageFromPacket =
    protoImpl[PacketTypeTag.StoreItemsMessage.type, StoreItemsMessageProto]

  // we don't need those at all  can be autogeneratedd by "protoSerde" but caching them could be beneficial for performance
  implicit final val blockHashMessageToPacket =
    protoSerde[PacketTypeTag.BlockHashMessage.type, BlockHashMessageProto]
  implicit final val blockMessageToPacket =
    protoSerde[PacketTypeTag.BlockMessage.type, BlockMessageProto]
  implicit final val blockRequestToPacket =
    protoSerde[PacketTypeTag.BlockRequest.type, BlockRequestProto]
  implicit final val hasBlockRequestToPacket =
    protoSerde[PacketTypeTag.HasBlockRequest.type, HasBlockRequestProto]
  implicit final val hasBlockToPacket = protoSerde[PacketTypeTag.HasBlock.type, HasBlockProto]
  implicit final val forkChoiceTipRequestToPacket =
    protoSerde[PacketTypeTag.ForkChoiceTipRequest.type, ForkChoiceTipRequestProto]
  // Finalized fringe
  implicit final val finalizedFringeToPacket =
    protoSerde[PacketTypeTag.FinalizedFringe.type, FinalizedFringeProto]
  implicit final val finalizedFringeRequestToPacket =
    protoSerde[PacketTypeTag.FinalizedFringeRequest.type, FinalizedFringeRequestProto]
  // Last finalized state messages
  implicit final val storeItemsMessageRequestToPacket =
    protoSerde[PacketTypeTag.StoreItemsMessageRequest.type, StoreItemsMessageRequestProto]
  implicit final val storeItemsMessageToPacket =
    protoSerde[PacketTypeTag.StoreItemsMessage.type, StoreItemsMessageProto]
}
