//scalapackage io.rhonix.rholang.math

//requires NonNegativeNumber, TestSet
new
  rl(`rho:registry:lookup`), RhoSpecCh, NonNegativeNumberCh,
  test_initialize_with_negative_value, test_initialize_with_nonnegative_value,
  test_operations_with_negative_numbers, test_subtract_too_much, test_add_successful,
  test_subtract_successful, test_fail_on_overflow, test_initialize_with_noninteger_value
in {
  rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
  for (@(_, RhoSpec) <- RhoSpecCh) {
    @RhoSpec!("testSuite",
      [
        ("Initially negative balances are converted to 0", *test_initialize_with_negative_value),
        ("Initially noninteger balances are converted to 0", *test_initialize_with_noninteger_value),
        ("Positive initial balances are preserved", *test_initialize_with_nonnegative_value),
        ("Adding or subtracting a negative number fails", *test_operations_with_negative_numbers),
        ("Subtracting an amount larger than the balance fails", *test_subtract_too_much),
        ("Adding a positive number works if there's no overflow", *test_add_successful),
        ("Subtracting a positive number less than or equal to the balance works", *test_subtract_successful),
        ("Addition overflow is prevented", *test_fail_on_overflow)
      ])
  } |

  rl!(`rho:lang:nonNegativeNumber`, *NonNegativeNumberCh) |
  for (@(_, NonNegativeNumber) <- NonNegativeNumberCh) {
    contract test_initialize_with_negative_value(rhoSpec, _, ackCh) = {
      new ch in {
        @NonNegativeNumber!(-1, *ch) |
        for (v <- ch) {
          v!("value", *ch) |
          rhoSpec!("assert", (0, "== <-", *ch), "-1 is converted to 0", *ackCh)
        }
      }
    } |

    contract test_initialize_with_noninteger_value(rhoSpec, _, ackCh) = {
      new ch1, ch2, ch3, ch4, ch5 in {
        @NonNegativeNumber!("a", *ch1) |
        @NonNegativeNumber!(Nil, *ch2) |
        @NonNegativeNumber!([], *ch3) |
        @NonNegativeNumber!({}, *ch4) |
        @NonNegativeNumber!(Set(), *ch5) |
        for (v1 <- ch1 & v2 <- ch2 & v3 <- ch3 & v4 <- ch4 & v5 <- ch5) {
          v1!("value", *ch1) |
          v2!("value", *ch2) |
          v3!("value", *ch3) |
          v4!("value", *ch4) |
          v5!("value", *ch5) |
          rhoSpec!("assertMany",
            [
              ((0, "== <-", *ch1), "string is converted to 0"),
              ((0, "== <-", *ch2), "Nil is converted to 0"),
              ((0, "== <-", *ch3), "list is converted to 0"),
              ((0, "== <-", *ch4), "map is converted to 0"),
              ((0, "== <-", *ch5), "set is converted to 0"),
            ],
            *ackCh)
        }
      }
    } |

    contract test_initialize_with_nonnegative_value(rhoSpec, _, ackCh) = {
      new ch1, ch2 in {
        let @init1 <- 0 & @init2 <- 1 in {
          @NonNegativeNumber!(init1, *ch1) |
          @NonNegativeNumber!(init2, *ch2) |
          for (v1 <- ch1 & v2 <- ch2) {
            v1!("value", *ch1) |
            v2!("value", *ch2) |
            rhoSpec!("assertMany",
              [
                ((init1, "== <-", *ch1), "Positive value initializes"),
                ((init2, "== <-", *ch2), "Positive value initializes"),
              ],
              *ackCh)
          }
        }
      }
    } |

    contract test_operations_with_negative_numbers(rhoSpec, _, ackCh) = {
      new ch, ch1, ch2 in {
        @NonNegativeNumber!(0, *ch) |
        for (v <- ch) {
          v!("add", -1, *ch1) |
          v!("sub", -1, *ch2) |
          rhoSpec!("assertMany",
            [
              ((false, "== <-", *ch1), "Adding a negative number fails"),
              ((false, "== <-", *ch2), "Subtracting a negative number fails"),
            ],
            *ackCh)
        }
      }
    } |

    contract test_subtract_too_much(rhoSpec, _, ackCh) = {
      new ch in {
        @NonNegativeNumber!(0, *ch) |
        for (v <- ch) {
          v!("sub", 1, *ch) |
          rhoSpec!("assert", (false, "== <-", *ch), "subtracting fails", *ackCh)
        }
      }
    } |

    contract test_add_successful(rhoSpec, _, ackCh) = {
      new ch in {
        let @init <- 0 & @amt <- 1 in {
          @NonNegativeNumber!(init, *ch) |
          for (v <- ch) {
            v!("add", amt, *ch) |
            for (@result <- ch) {
              v!("value", *ch) |
              rhoSpec!("assertMany",
                [
                  ((true, "==", result), "add succeeds"),
                  ((init + amt, "== <-", *ch), "result is correct"),
                ],
                *ackCh)
            }
          }
        }
      }
    } |

    contract test_subtract_successful(rhoSpec, _, ackCh) = {
      new ch in {
        let @init <- 2 & @amt <- 1 in {
          @NonNegativeNumber!(2, *ch) |
          for (v <- ch) {
            v!("sub", 1, *ch) |
            for (@result <- ch) {
              v!("value", *ch) |
              rhoSpec!("assertMany",
                [
                  ((true, "==", result), "sub succeeds"),
                  ((init - amt, "== <-", *ch), "result is correct"),
                ],
                *ackCh)
            }
          }
        }
      }
    } |

    contract test_fail_on_overflow(rhoSpec, _, ackCh) = {
      new ch in {
        let @max <- 9223372036854775757 in {
          @NonNegativeNumber!(max, *ch) |
          for (v <- ch) {
            v!("add", max, *ch) |
            rhoSpec!("assert", (false, "== <-", *ch), "add fails", *ackCh)
          }
        }
      }
    }
  }
}
